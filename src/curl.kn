include response
include option
include code
include slist

+class Curl()
	+func[curl_kuin_bridge.dll, export_curl_easy_setopt_org]easy_setopt_int(option: int, parameter: int): int
	end func
	
	+func[curl_kuin_bridge.dll, export_curl_easy_setopt_str]easy_setopt_str(option: int, parameter: []char): int
	end func
	
	+func[curl_kuin_bridge.dll, export_curl_easy_setopt_arr]easy_setopt_arr(option: int, parameter: []bit8): int
	end func
	
	+func easy_setopt_slist(option: int, parameter: @Slist): int
		ret me.easy_setopt_int(option, parameter.getPtr())
	end func
	
	+func[curl_kuin_bridge.dll, export_curl_easy_perform]easy_perform(): int
	end func
	
	+func[curl_kuin_bridge.dll, export_curl_easy_cleanup]easy_cleanup()
	end func
	
	+func[curl_kuin_bridge.dll, export_curl_easy_reset]easy_reset()
	end func
	
	+func[curl_kuin_bridge.dll, export_config_easy_response]config_easy_response(me2: &@Response): int
	end func
	
	+func[curl_kuin_bridge.dll, export_config_easy_header]config_easy_header(me2: &@Response): int
	end func
	
	+func[curl_kuin_bridge.dll, export_async_perform, _make_instance]async_perform(me2: @CurlAsyncTask): @CurlAsyncTask
	end func
	
	var curl: int
end class

+class CurlAsyncTask()
	+func[curl_kuin_bridge.dll, export_async_task_get]get(): int
	end func
	
	var task: int
end class

+func[curl_kuin_bridge.dll, export_curl_easy_init, _make_instance]makeCurl(me2: @Curl): @Curl
end func

+func[curl_kuin_bridge.dll, export_dump_memory]dump_memory(input: []char)
end func
